package pentesting;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Scanner;

public class Client {
    public static String ADD = "255.255.255.255";
    public static String test = "172.30.193.12";
    public static DatagramSocket socket;
    public static int port = 1234;

    public static void main(String[] args) throws Exception {

	String a = "192.168.150.";
	InetAddress k = InetAddress.getByName("172.30.193.132");
	if (k.isReachable(100)) {
	    System.out.println("was reachable");
	}

	InetAddress g = InetAddress.getByName("172.30.193.12");
	if (g.isReachable(100)) {
	    System.out.println("was reachable");
	}

	int i = 0;
	for (int j = 0; j < Math.pow(2.0, 16) - 1; j++) {
	    i++;
	    String binary = Integer.toBinaryString(i);
	    int dif = 8 - binary.length();
	    while (dif-- > 0) {
		binary = "0" + binary;
	    }
//	    String first = binary.substring(8, 16);
//	    int b = Integer.parseInt(first, 2);
	    String ult = binary.substring(0, 8);
	    int c = Integer.parseInt(ult, 2);

	    String n = a + c   ;
//	    System.out.println(n);
	    InetAddress add = InetAddress.getByName(n);
	    System.out.println(add.getHostAddress());
	    if (add.isReachable(300)) {
		System.out.println(n + "was reachable");
	    }
	}
//	System.out.println(InetAddress.getByName(ADD).getHostAddress());
//	socket = new DatagramSocket();
//	socket.setBroadcast(true);
//
//	initRead();
//	initReceive();

//	DatagramPacket sendPacket = new DatagramPacket("en".getBytes(), "en".length(),
//		InetAddress.getByName("255.255.255.255"), 8888);
//	socket.send(sendPacket);

//	initReceive();

    }

    public static List<InetAddress> listAllBroadcastAddresses() throws SocketException {
	List<InetAddress> broadcastList = new ArrayList<>();
	Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
	while (interfaces.hasMoreElements()) {
	    NetworkInterface networkInterface = interfaces.nextElement();

	    if (networkInterface.isLoopback() || !networkInterface.isUp()) {
		continue;
	    }

	    for (InterfaceAddress ia : networkInterface.getInterfaceAddresses()) {
		InetAddress broadcast = ia.getBroadcast();
		if (broadcast == null) {
		    continue;
		}
		broadcastList.add(broadcast);
	    }

	}
	return broadcastList;
    }

    private static void initReceive() {
	Thread t = new Thread(new Runnable() {

	    @Override
	    public void run() {
		while (!socket.isClosed()) {
		    DatagramPacket p = new DatagramPacket(new byte[1024], 1024);
		    try {
			socket.receive(p);
			System.out.println("listened");
			String r = new String(p.getData());
			System.out.println(r);
			String from = p.getAddress().getHostAddress();
			System.out.println("f:");
			System.out.println(from + ":" + p.getPort());
		    } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		    }

		}

	    }
	});
	t.start();

    }

    private static void initRead() {
	Thread t = new Thread(new Runnable() {

	    @Override
	    public void run() {
		System.out.println("Escriba");
		Scanner sc = new Scanner(System.in);
		while (true) {

		    String a = sc.nextLine();
		    send(a);
		}

	    }

	});
	t.start();

    }

    public static void send(String a) {
	try {

//	    List<InetAddress> broadcastlist = listAllBroadcastAddresses();
//	    for (InetAddress broad : broadcastlist) {

	    for (int i = 0; i < 65535; i++) {
//		    System.out.println(i);
		DatagramPacket p = new DatagramPacket(a.getBytes(), a.length(),
			InetAddress.getByName("255.255.255.255"), i);
		socket.send(p);
	    }

//	    }

//	    DatagramPacket sendPacket = new DatagramPacket(a.getBytes(), a.length(),	
//		    InetAddress.getByName("255.255.255.255"), 8888);
//	    socket.send(sendPacket);

	} catch (Exception e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

    }

}
